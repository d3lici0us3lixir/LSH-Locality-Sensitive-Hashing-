#include "GIFT.h"
#define ITERNUM 100000
typedef unsigned char uint8_t;



GIFT::GIFT(uint8_t* P, const uint8_t* K) {
	memcpy(S, P, sizeof(uint8_t) * 16);
	memcpy(W, K, sizeof(uint8_t) * 16);

}

string GIFT::giftb128_8(int round) {


	S[4] ^= S[0] & S[8];
	S[5] ^= S[1] & S[9];
	S[6] ^= S[2] & S[10];
	S[7] ^= S[3] & S[11];
	S[0] ^= S[4] & S[12];
	S[1] ^= S[5] & S[13];
	S[2] ^= S[6] & S[14];
	S[3] ^= S[7] & S[15];
	S[8] ^= S[0] | S[4];
	S[9] ^= S[1] | S[5];
	S[10] ^= S[2] | S[6];
	S[11] ^= S[3] | S[7];
	S[12] ^= S[8];
	S[13] ^= S[9];
	S[14] ^= S[10];
	S[15] ^= S[11];
	S[4] ^= S[12];
	S[5] ^= S[13];
	S[6] ^= S[14];
	S[7] ^= S[15];
	S[12] ^= 0xff;
	S[13] ^= 0xff;
	S[14] ^= 0xff;
	S[15] ^= 0xff;
	S[8] ^= S[0] & S[4];
	S[9] ^= S[1] & S[5];
	S[10] ^= S[2] & S[6];
	S[11] ^= S[3] & S[7];
	T[0] = S[0];
	T[1] = S[1];
	T[2] = S[2];
	T[3] = S[3];
	S[0] = S[12];
	S[1] = S[13];
	S[2] = S[14];
	S[3] = S[15];
	S[12] = T[0];
	S[13] = T[1];
	S[14] = T[2];
	S[15] = T[3];
	T[3] = ((S[3] >> 0) & 0x1) | (((S[3] >> (4 + 0)) & 0x1) << 1) | (((S[2] >> 0) & 0x1) << 2) | (((S[2] >> (0 + 4)) & 0x1) << 3) | (((S[1] >> 0) & 0x1) << 4) | (((S[1] >> (0 + 4)) & 0x1) << 5) | (((S[0] >> 0) & 0x1) << 6) | (((S[0] >> (0 + 4)) & 0x1) << 7);
	T[2] = ((S[3] >> 3) & 0x1) | (((S[3] >> (4 + 3)) & 0x1) << 1) | (((S[2] >> 3) & 0x1) << 2) | (((S[2] >> (3 + 4)) & 0x1) << 3) | (((S[1] >> 3) & 0x1) << 4) | (((S[1] >> (3 + 4)) & 0x1) << 5) | (((S[0] >> 3) & 0x1) << 6) | (((S[0] >> (3 + 4)) & 0x1) << 7);
	T[1] = ((S[3] >> 2) & 0x1) | (((S[3] >> (4 + 2)) & 0x1) << 1) | (((S[2] >> 2) & 0x1) << 2) | (((S[2] >> (2 + 4)) & 0x1) << 3) | (((S[1] >> 2) & 0x1) << 4) | (((S[1] >> (2 + 4)) & 0x1) << 5) | (((S[0] >> 2) & 0x1) << 6) | (((S[0] >> (2 + 4)) & 0x1) << 7);
	T[0] = ((S[3] >> 1) & 0x1) | (((S[3] >> (4 + 1)) & 0x1) << 1) | (((S[2] >> 1) & 0x1) << 2) | (((S[2] >> (1 + 4)) & 0x1) << 3) | (((S[1] >> 1) & 0x1) << 4) | (((S[1] >> (1 + 4)) & 0x1) << 5) | (((S[0] >> 1) & 0x1) << 6) | (((S[0] >> (1 + 4)) & 0x1) << 7);
	T1[2] = ((S[7] >> 0) & 0x1) | (((S[7] >> (4 + 0)) & 0x1) << 1) | (((S[6] >> 0) & 0x1) << 2) | (((S[6] >> (0 + 4)) & 0x1) << 3) | (((S[5] >> 0) & 0x1) << 4) | (((S[5] >> (0 + 4)) & 0x1) << 5) | (((S[4] >> 0) & 0x1) << 6) | (((S[4] >> (0 + 4)) & 0x1) << 7);
	T1[1] = ((S[7] >> 3) & 0x1) | (((S[7] >> (4 + 3)) & 0x1) << 1) | (((S[6] >> 3) & 0x1) << 2) | (((S[6] >> (3 + 4)) & 0x1) << 3) | (((S[5] >> 3) & 0x1) << 4) | (((S[5] >> (3 + 4)) & 0x1) << 5) | (((S[4] >> 3) & 0x1) << 6) | (((S[4] >> (3 + 4)) & 0x1) << 7);
	T1[0] = ((S[7] >> 2) & 0x1) | (((S[7] >> (4 + 2)) & 0x1) << 1) | (((S[6] >> 2) & 0x1) << 2) | (((S[6] >> (2 + 4)) & 0x1) << 3) | (((S[5] >> 2) & 0x1) << 4) | (((S[5] >> (2 + 4)) & 0x1) << 5) | (((S[4] >> 2) & 0x1) << 6) | (((S[4] >> (2 + 4)) & 0x1) << 7);
	T1[3] = ((S[7] >> 1) & 0x1) | (((S[7] >> (4 + 1)) & 0x1) << 1) | (((S[6] >> 1) & 0x1) << 2) | (((S[6] >> (1 + 4)) & 0x1) << 3) | (((S[5] >> 1) & 0x1) << 4) | (((S[5] >> (1 + 4)) & 0x1) << 5) | (((S[4] >> 1) & 0x1) << 6) | (((S[4] >> (1 + 4)) & 0x1) << 7);
	T2[1] = ((S[11] >> 0) & 0x1) | (((S[11] >> (4 + 0)) & 0x1) << 1) | (((S[10] >> 0) & 0x1) << 2) | (((S[10] >> (0 + 4)) & 0x1) << 3) | (((S[9] >> 0) & 0x1) << 4) | (((S[9] >> (0 + 4)) & 0x1) << 5) | (((S[8] >> 0) & 0x1) << 6) | (((S[8] >> (0 + 4)) & 0x1) << 7);
	T2[0] = ((S[11] >> 3) & 0x1) | (((S[11] >> (4 + 3)) & 0x1) << 1) | (((S[10] >> 3) & 0x1) << 2) | (((S[10] >> (3 + 4)) & 0x1) << 3) | (((S[9] >> 3) & 0x1) << 4) | (((S[9] >> (3 + 4)) & 0x1) << 5) | (((S[8] >> 3) & 0x1) << 6) | (((S[8] >> (3 + 4)) & 0x1) << 7);
	T2[3] = ((S[11] >> 2) & 0x1) | (((S[11] >> (4 + 2)) & 0x1) << 1) | (((S[10] >> 2) & 0x1) << 2) | (((S[10] >> (2 + 4)) & 0x1) << 3) | (((S[9] >> 2) & 0x1) << 4) | (((S[9] >> (2 + 4)) & 0x1) << 5) | (((S[8] >> 2) & 0x1) << 6) | (((S[8] >> (2 + 4)) & 0x1) << 7);
	T2[2] = ((S[11] >> 1) & 0x1) | (((S[11] >> (4 + 1)) & 0x1) << 1) | (((S[10] >> 1) & 0x1) << 2) | (((S[10] >> (1 + 4)) & 0x1) << 3) | (((S[9] >> 1) & 0x1) << 4) | (((S[9] >> (1 + 4)) & 0x1) << 5) | (((S[8] >> 1) & 0x1) << 6) | (((S[8] >> (1 + 4)) & 0x1) << 7);
	T3[0] = ((S[15] >> 0) & 0x1) | (((S[15] >> (4 + 0)) & 0x1) << 1) | (((S[14] >> 0) & 0x1) << 2) | (((S[14] >> (0 + 4)) & 0x1) << 3) | (((S[13] >> 0) & 0x1) << 4) | (((S[13] >> (0 + 4)) & 0x1) << 5) | (((S[12] >> 0) & 0x1) << 6) | (((S[12] >> (0 + 4)) & 0x1) << 7);
	T3[3] = ((S[15] >> 3) & 0x1) | (((S[15] >> (4 + 3)) & 0x1) << 1) | (((S[14] >> 3) & 0x1) << 2) | (((S[14] >> (3 + 4)) & 0x1) << 3) | (((S[13] >> 3) & 0x1) << 4) | (((S[13] >> (3 + 4)) & 0x1) << 5) | (((S[12] >> 3) & 0x1) << 6) | (((S[12] >> (3 + 4)) & 0x1) << 7);
	T3[2] = ((S[15] >> 2) & 0x1) | (((S[15] >> (4 + 2)) & 0x1) << 1) | (((S[14] >> 2) & 0x1) << 2) | (((S[14] >> (2 + 4)) & 0x1) << 3) | (((S[13] >> 2) & 0x1) << 4) | (((S[13] >> (2 + 4)) & 0x1) << 5) | (((S[12] >> 2) & 0x1) << 6) | (((S[12] >> (2 + 4)) & 0x1) << 7);
	T3[1] = ((S[15] >> 1) & 0x1) | (((S[15] >> (4 + 1)) & 0x1) << 1) | (((S[14] >> 1) & 0x1) << 2) | (((S[14] >> (1 + 4)) & 0x1) << 3) | (((S[13] >> 1) & 0x1) << 4) | (((S[13] >> (1 + 4)) & 0x1) << 5) | (((S[12] >> 1) & 0x1) << 6) | (((S[12] >> (1 + 4)) & 0x1) << 7);
	S[0] = T[0];
	S[1] = T[1];
	S[2] = T[2];
	S[3] = T[3];
	S[4] = T1[0];
	S[5] = T1[1];
	S[6] = T1[2];
	S[7] = T1[3];
	S[8] = T2[0];
	S[9] = T2[1];
	S[10] = T2[2];
	S[11] = T2[3];
	S[12] = T3[0];
	S[13] = T3[1];
	S[14] = T3[2];
	S[15] = T3[3];
	S[8] ^= W[4];
	S[9] ^= W[5];
	S[10] ^= W[6];
	S[11] ^= W[7];
	S[4] ^= W[12];
	S[5] ^= W[13];
	S[6] ^= W[14];
	S[7] ^= W[15];
	S[12] ^= 0X80;
	S[13] ^= 0X00;
	S[14] ^= 0X00;
	S[15] ^= GIFT_RC[round];
	T6[0] = (W[12] >> 2) | (W[13] << 6);
	T6[1] = (W[13] >> 2) | (W[12] << 6);
	T7[0] = (W[14] << 4) | (W[15] >> 4);
	T7[1] = (W[14] >> 4) | (W[15] << 4);
	W[14] = W[10];
	W[15] = W[11];
	W[12] = W[8];
	W[13] = W[9];
	W[10] = W[6];
	W[11] = W[7];
	W[8] = W[4];
	W[9] = W[5];
	W[6] = W[2];
	W[7] = W[3];
	W[4] = W[0];
	W[5] = W[1];
	W[3] = T7[1];
	W[2] = T7[0];
	W[1] = T6[1];
	W[0] = T6[0];

	vector<string> connect_str;
	connect_str.clear();
	string ori_str = "";
	std::ostringstream ss;
	for (int i = 0; i < 16; i++) {
		// Convert each element to a two-digit hexadecimal string

		ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(S[i]);
		ori_str += ss.str();
	}
	
	return ori_str;
}

void performance_calc() {


	uint8_t P[16] = { 0x00, };
	uint8_t K[16] = { 0x00, };
	uint8_t C[16] = { 0x00, };
	GIFT gift(P, K);
	string tmp;
	for (int i = 0; i < 16; i++) {
		tmp = gift.giftb128_8(i);
		cout << tmp << endl;
	}

}



/*
int main()
{
	performance_calc();
}
*/